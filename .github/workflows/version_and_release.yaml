name: Version and Release

on:
  pull_request:
    types:
      - closed

jobs:
  version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install bump2version
        run: pip install bump2version

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install npm dependencies
        run: npm install --prefix frontend

      - name: Determine version increment
        id: version-increment
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" == *"[major]"* ]]; then
            echo "BUMP_LEVEL=major" >> $GITHUB_ENV
          elif [[ "$PR_TITLE" == *"[minor]"* ]]; then
            echo "BUMP_LEVEL=minor" >> $GITHUB_ENV
          else
            echo "BUMP_LEVEL=patch" >> $GITHUB_ENV
          fi

      - name: Bump version
        id: bump
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          bump2version --allow-dirty $BUMP_LEVEL
          NEW_VERSION=$(grep current_version .bumpversion.cfg | cut -d' ' -f3)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        run: npx conventional-changelog-cli -p angular -i CHANGELOG.md -s

      - name: Commit files
        env:
          NEW_VERSION: ${{ steps.bump.outputs.new_version }}
        run: |
          git add manifest.json frontend/package.json CHANGELOG.md .bumpversion.cfg
          git commit -m "chore(release): version $NEW_VERSION"
          git push

      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: CHANGELOG.md

  release:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Download release notes
        uses: actions/download-artifact@v3
        with:
          name: release-notes

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          release_name: Release ${{ needs.version.outputs.new_version }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
